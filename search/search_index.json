{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#home","title":"Home","text":"<p>Welcome to the public documentation for modules made by me (RadiatedExodus/RealEthanPlayzDev)! This website, as said above provides documentation, usages, and about for modules I made.</p>"},{"location":"#contact-me","title":"Contact me!","text":"<ul> <li>Roblox Portfolio</li> <li>GitHub</li> <li>Roblox</li> <li>Roblox Developer Forum</li> <li>Twitter</li> <li>YouTube</li> <li>E-Mail: <code>radiatedexodus@gmail.com</code></li> <li>Discord: <code>radiatedexodus</code></li> </ul>"},{"location":"#public-modules","title":"Public modules","text":"<ul> <li>Device Info</li> <li>Color Picker Module</li> <li>RigConverter</li> <li>StarGenerator</li> <li>GeometryLinesBackground</li> <li>RESignal</li> <li>LuaTextBox</li> <li>Builder</li> <li>LuauInLuau</li> </ul>"},{"location":"#public-plugins","title":"Public plugins","text":"<ul> <li>RunLSC</li> </ul>"},{"location":"Builder/About/","title":"About","text":"<p>Builder is a instance building system, similar to Roact and Fusion.</p> <p>Builder uses a object called <code>Descriptor</code> to build instances, it contains a description of the instance you want to build.</p> <p>Builder has additional objects to support you in building a <code>Descriptor</code>:</p> <ul> <li><code>Event</code> - An object to help with connecting to a event when building instances.</li> <li><code>Method</code> - An object to help with calling a method when building instances.</li> <li><code>PropertyChangedSignal</code> - An object to help with detecting property changes when building instances.</li> <li><code>Attribute</code> - An object to help with setting a attribute when building instances.</li> <li><code>AttributeChangedSignal</code> - An object to help with detecting attribute changes when building instances.</li> <li><code>MultiStateResolvable</code> - An object to help with setting a property with a state from a <code>MultiState</code>.</li> </ul> <p>Builder also has 2 basic state systems:</p> <ul> <li><code>State</code> - An object to store a state, like a variable.</li> <li><code>MultiState</code> - An object to store multiple states, similar to dictionaries.</li> </ul> <p>Builder also has support for custom classes, just ensure it's inside a modulescript, and returns a table with a <code>new</code> field as the constructor for the class. See this page for more information.</p> <p>Upon requiring the module, it will return the <code>Builder</code> class.</p>"},{"location":"Builder/About/#get-the-module","title":"Get the module","text":"<ul> <li>GitHub Repository</li> </ul>"},{"location":"Builder/CustomClasses/","title":"Custom classes","text":"<p>Builder supports custom classes, custom classes must be inside a ModuleScript within the search range of the descriptor, and must return a field called <code>new</code> acting as the constructor.</p> <p>By default, the module finds custom classes under a folder called <code>CustomClasses</code> parented to the root of the Builder ModuleScript.</p> <p><code>Descriptor</code> has a field, <code>Descriptor.CustomClassesLocation</code> that can be set as a alternative custom class search path, it overrides the default search path.</p>"},{"location":"Builder/API%20Reference/Attribute/About/","title":"About","text":"<p><code>Attribute</code> is a extended <code>Resolvable</code> class that sets a attribute when building instances.</p> <p>Throws error if not <code>Instance</code></p> <p>If the description where this <code>Attribute</code> is put is not a Roblox <code>Instance</code>, it will throw a error while resolving.</p> <p>Using it in a <code>Description</code>: </p><pre><code>{\n    [Builder.Attribute(\"AttributeName\")] = AttributeValue\n}\n</code></pre>"},{"location":"Builder/API%20Reference/Attribute/func_Resolve/","title":"Resolve()","text":""},{"location":"Builder/API%20Reference/Attribute/func_Resolve/#function-information","title":"Function information","text":"<pre><code>function Attribute:Resolve(inst, value: any)\n</code></pre> <p>Resolves the <code>Attribute</code> by setting a attribute on <code>inst</code> with <code>value</code> as the attribute value.</p>"},{"location":"Builder/API%20Reference/Attribute/func_Resolve/#arguments","title":"Arguments","text":"<ul> <li><code>inst</code> - The instance where the attribute will be set.</li> <li><code>value: any</code> - The value of the attribute.</li> </ul>"},{"location":"Builder/API%20Reference/Attribute/publicvar_Target/","title":"Target","text":""},{"location":"Builder/API%20Reference/Attribute/publicvar_Target/#public-variable-information","title":"Public variable information","text":"<pre><code>Attribute.Target :: string\n</code></pre> <p>The attribute name.</p>"},{"location":"Builder/API%20Reference/AttributeChangedSignal/About/","title":"About","text":"<p><code>AttributeChangedSignal</code> is a extended <code>Resolvable</code> class that handles attribute changes by connecting the passed function handler using <code>Instance:GetAttributeChangedSignal()</code>.</p> <p>Throws error if not <code>Instance</code></p> <p>If the description where this <code>AttributeChangedSignal</code> is put is not a Roblox <code>Instance</code>, it will throw a error while resolving.</p> <p>Using it in a <code>Description</code>: </p><pre><code>{\n    [Builder.AttributeChangedSignal(\"AttributeName\")] = function() return end\n}\n</code></pre>"},{"location":"Builder/API%20Reference/AttributeChangedSignal/func_Resolve/","title":"Resolve()","text":""},{"location":"Builder/API%20Reference/AttributeChangedSignal/func_Resolve/#function-information","title":"Function information","text":"<pre><code>function AttributeChangedSignal:Resolve(inst, value: (...any) -&gt; (...any))\n</code></pre> <p>Resolves the <code>AttributeChangedSignal</code> by calling <code>Instance:GetAttributeChangedSignal()</code> with the attribute name as the first argument and then connects the event returned by the function using <code>value</code>.</p>"},{"location":"Builder/API%20Reference/AttributeChangedSignal/func_Resolve/#arguments","title":"Arguments","text":"<ul> <li><code>inst</code> - The target instance/class</li> <li><code>value: (...any) -&gt; (...any)</code> - The function to be connected handling attribute changes</li> </ul>"},{"location":"Builder/API%20Reference/AttributeChangedSignal/publicvar_Target/","title":"Target","text":""},{"location":"Builder/API%20Reference/AttributeChangedSignal/publicvar_Target/#public-variable-information","title":"Public variable information","text":"<pre><code>AttributeChangedSignal.Target :: string\n</code></pre> <p>The attribute's name to be used for detecting changes.</p>"},{"location":"Builder/API%20Reference/Builder/About/","title":"About","text":"<p><code>Builder</code> is a static class containing constructor functions for nearly everything and other utility functions. This class is returned by the module when being required by a script.</p>"},{"location":"Builder/API%20Reference/Builder/func_Attribute/","title":"Attribute","text":""},{"location":"Builder/API%20Reference/Builder/func_Attribute/#function-information","title":"Function information","text":"<pre><code>function Builder.Attribute(attributename: string): Attribute\n</code></pre> <p>Returns an <code>Attribute</code> resolvable to be used in a <code>Description</code>.</p>"},{"location":"Builder/API%20Reference/Builder/func_Attribute/#arguments","title":"Arguments","text":"<ul> <li><code>attributename: string</code> - The attribute name</li> </ul>"},{"location":"Builder/API%20Reference/Builder/func_AttributeChangedSignal/","title":"AttributeChangedSignal","text":""},{"location":"Builder/API%20Reference/Builder/func_AttributeChangedSignal/#function-information","title":"Function information","text":"<pre><code>function Builder.AttributeChangedSignal(attributename: string): AttributeChangedSignal\n</code></pre> <p>Returns an <code>AttributeChangedSignal</code> resolvable to be used in a <code>Description</code>.</p>"},{"location":"Builder/API%20Reference/Builder/func_AttributeChangedSignal/#arguments","title":"Arguments","text":"<ul> <li><code>attributename: string</code> - The attribute name</li> </ul>"},{"location":"Builder/API%20Reference/Builder/func_Cleaner/","title":"Cleaner","text":""},{"location":"Builder/API%20Reference/Builder/func_Cleaner/#function-information","title":"Function information","text":"<pre><code>function Builder.Cleaner(... : any): Cleaner\n</code></pre> <p>Returns an <code>Cleaner</code> object.</p>"},{"location":"Builder/API%20Reference/Builder/func_Cleaner/#arguments","title":"Arguments","text":"<ul> <li><code>... : any</code> - Initial cleanup objects</li> </ul>"},{"location":"Builder/API%20Reference/Builder/func_CreateDescriptorFunctionWithCustomClassLocation/","title":"CreateDescriptorFunctionWithCustomClassLocation","text":""},{"location":"Builder/API%20Reference/Builder/func_CreateDescriptorFunctionWithCustomClassLocation/#function-information","title":"Function information","text":"<pre><code>function Builder.CreateDescriptorFunctionWithCustomClassLocation(customclasseslocation: Instance): (classname: string, description: Description?) -&gt; Descriptor\n</code></pre> <p>Returns a function that wraps around <code>Builder.Descriptor()</code> with the custom classes argument always passed with <code>customclasseslocation</code>.</p>"},{"location":"Builder/API%20Reference/Builder/func_CreateDescriptorFunctionWithCustomClassLocation/#arguments","title":"Arguments","text":"<ul> <li><code>customclasseslocation: Instance</code> - The location where custom classes are located</li> </ul>"},{"location":"Builder/API%20Reference/Builder/func_Descriptor/","title":"Descriptor","text":""},{"location":"Builder/API%20Reference/Builder/func_Descriptor/#function-information","title":"Function information","text":"<pre><code>function Builder.Descriptor(classname: string, description: Description?, customclasseslocation: Instance?): Descriptor\n</code></pre> <p>Returns an <code>Descriptor</code> with the base class as <code>classname</code> and description as <code>description</code>.</p> <p>If you want to use a specific custom class location without wanting to pass the location to <code>customclasseslocation</code>, consider using <code>Builder.CreateDescriptorFunctionWithCustomClassLocation()</code> that will give you a wrapper around this function with the <code>customclasseslocation</code> argument always passed with the custom class location you specified at that function.</p>"},{"location":"Builder/API%20Reference/Builder/func_Descriptor/#arguments","title":"Arguments","text":"<ul> <li><code>classname: string</code> - The base/root classname</li> <li><code>description: Description?</code> - The description of the <code>Descriptor</code></li> <li><code>customclasseslocation: Instance?</code> - Alternative custom class search path</li> </ul>"},{"location":"Builder/API%20Reference/Builder/func_Event/","title":"Event","text":""},{"location":"Builder/API%20Reference/Builder/func_Event/#function-information","title":"Function information","text":"<pre><code>function Builder.Event(eventname: string): Event\n</code></pre> <p>Returns an <code>Event</code> resolvable to be used in a <code>Description</code>.</p>"},{"location":"Builder/API%20Reference/Builder/func_Event/#arguments","title":"Arguments","text":"<ul> <li><code>eventname: string</code> - The event name</li> </ul>"},{"location":"Builder/API%20Reference/Builder/func_Method/","title":"Method","text":""},{"location":"Builder/API%20Reference/Builder/func_Method/#function-information","title":"Function information","text":"<pre><code>function Builder.Method(methodname: string): Method\n</code></pre> <p>Returns an <code>Method</code> resolvable to be used in a <code>Description</code>.</p>"},{"location":"Builder/API%20Reference/Builder/func_Method/#arguments","title":"Arguments","text":"<ul> <li><code>methodname: string</code> - The method name</li> </ul>"},{"location":"Builder/API%20Reference/Builder/func_MultiState/","title":"MultiState","text":""},{"location":"Builder/API%20Reference/Builder/func_MultiState/#function-information","title":"Function information","text":"<pre><code>function Builder.MultiState(initialstates: {[any]: any}?): MultiState\n</code></pre> <p>Returns an <code>MultiState</code> object with an optional <code>initialstates</code> argument as the initial values.</p>"},{"location":"Builder/API%20Reference/Builder/func_MultiState/#arguments","title":"Arguments","text":"<ul> <li><code>initialstates: {[any]: any}?</code> - An optional initial state values dictionary</li> </ul>"},{"location":"Builder/API%20Reference/Builder/func_MultiStateResolvable/","title":"MultiStateResolvable","text":""},{"location":"Builder/API%20Reference/Builder/func_MultiStateResolvable/#function-information","title":"Function information","text":"<pre><code>function Builder.MultiStateResolvable(multistate: MultiState, statename: any): MultiStateResolvable\n</code></pre> <p>Returns an <code>MultiStateResolvable</code> resolvable to be used in a <code>Description</code>.</p>"},{"location":"Builder/API%20Reference/Builder/func_MultiStateResolvable/#arguments","title":"Arguments","text":"<ul> <li><code>multistate: MultiState</code> - The <code>MultiState</code> object to be used</li> <li><code>statename: any</code> - The state name/key</li> </ul>"},{"location":"Builder/API%20Reference/Builder/func_PropertyChangedSignal/","title":"PropertyChangedSignal","text":""},{"location":"Builder/API%20Reference/Builder/func_PropertyChangedSignal/#function-information","title":"Function information","text":"<pre><code>function Builder.PropertyChangedSignal(propertyname: string): PropertyChangedSignal\n</code></pre> <p>Returns an <code>PropertyChangedSignal</code> resolvable to be used in a <code>Description</code>.</p>"},{"location":"Builder/API%20Reference/Builder/func_PropertyChangedSignal/#arguments","title":"Arguments","text":"<ul> <li><code>propertyname: string</code> - The property name</li> </ul>"},{"location":"Builder/API%20Reference/Builder/func_State/","title":"State","text":""},{"location":"Builder/API%20Reference/Builder/func_State/#function-information","title":"Function information","text":"<pre><code>function Builder.State(value: any): State\n</code></pre> <p>Returns an <code>State</code> object with an optional initial value from <code>value</code>.</p>"},{"location":"Builder/API%20Reference/Builder/func_State/#arguments","title":"Arguments","text":"<ul> <li><code>value: any</code> - An optional initial value for the state</li> </ul>"},{"location":"Builder/API%20Reference/Builder/func_WrappedInstanceNew/","title":"WrappedInstanceNew","text":""},{"location":"Builder/API%20Reference/Builder/func_WrappedInstanceNew/#function-information","title":"Function information","text":"<pre><code>function Builder.WrappedInstanceNew(classname: string, customclasslocation: Instance?)\n</code></pre> <p>This is a wrapped <code>Instance.new</code> function to also support custom classes. See this page for more information regarding custom class support.</p> <p>Returns newly constructed class/object/instance.</p> <p>Can throw error</p> <p>Ensure that the <code>classname</code> is correct, if it's a custom class, ensure the module returns a table with a <code>new</code> function as the constructor otherwise it will fallback to Roblox's <code>Instance.new</code>.</p>"},{"location":"Builder/API%20Reference/Builder/func_WrappedInstanceNew/#arguments","title":"Arguments","text":"<ul> <li><code>classname: string</code> - The target class name to be constructed</li> <li><code>customclasslocation: Instance?</code> - Alternative custom class search location</li> </ul>"},{"location":"Builder/API%20Reference/Builder/func_WrappedTypeof/","title":"WrappedTypeof","text":""},{"location":"Builder/API%20Reference/Builder/func_WrappedTypeof/#function-information","title":"Function information","text":"<pre><code>function Builder.WrappedTypeof(class: any): string\n</code></pre> <p>This is a wrapped <code>typeof()</code> function to also support <code>Builder</code>'s custom classes (it checks for <code>class[\"__type\"]</code>)</p> <p>Returns the class name</p>"},{"location":"Builder/API%20Reference/Builder/func_WrappedTypeof/#arguments","title":"Arguments","text":"<ul> <li><code>class: any</code> - The class to check the class name</li> </ul>"},{"location":"Builder/API%20Reference/Cleaner/About/","title":"About","text":"<p>Cleaner is a class for handling cleanups of objects, connections, and custom classes. Similar to one of Quenty's NevermoreEngine libraries, Maid.</p>"},{"location":"Builder/API%20Reference/Cleaner/event_OnCleanup/","title":"OnCleanup","text":""},{"location":"Builder/API%20Reference/Cleaner/event_OnCleanup/#event-information","title":"Event information","text":"<pre><code>Cleaner.OnCleanup :: RESignal\n</code></pre> <p>This event will fire once before <code>Cleaner:Clean()</code> starts destroying objects in the cleanup list.</p> <p>The signal object used is not a <code>RBXScriptSignal</code>, but my custom signal library called RESignal.</p>"},{"location":"Builder/API%20Reference/Cleaner/event_OnCleanup/#passed-arguments","title":"Passed arguments","text":"Number Name Type Description 1 objects {any} The array of objects to be destroyed"},{"location":"Builder/API%20Reference/Cleaner/event_OnObjectAdded/","title":"OnObjectAdded","text":""},{"location":"Builder/API%20Reference/Cleaner/event_OnObjectAdded/#event-information","title":"Event information","text":"<pre><code>Cleaner.OnObjectAdded :: RESignal\n</code></pre> <p>This event will fire each time an object is added using <code>Cleaner:Add()</code>.</p> <p>The signal object used is not a <code>RBXScriptSignal</code>, but my custom signal library called RESignal.</p>"},{"location":"Builder/API%20Reference/Cleaner/event_OnObjectAdded/#passed-arguments","title":"Passed arguments","text":"Number Name Type Description 1 obj any The object that was added using <code>Cleaner:Add()</code>"},{"location":"Builder/API%20Reference/Cleaner/event_OnObjectCleaning/","title":"OnObjectCleaning","text":""},{"location":"Builder/API%20Reference/Cleaner/event_OnObjectCleaning/#event-information","title":"Event information","text":"<pre><code>Cleaner.OnObjectCleaning :: RESignal\n</code></pre> <p>This event will fire each time before an object is destroyed using <code>Cleaner:Clean()</code>.</p> <p>The signal object used is not a <code>RBXScriptSignal</code>, but my custom signal library called RESignal.</p>"},{"location":"Builder/API%20Reference/Cleaner/event_OnObjectCleaning/#passed-arguments","title":"Passed arguments","text":"Number Name Type Description 1 obj any The object that is about to be destroyed using <code>Cleaner:Clean()</code> 2 destroyfuncname string The destroyer function method name used to destroy the object"},{"location":"Builder/API%20Reference/Cleaner/event_OnObjectRemoving/","title":"OnObjectRemoving","text":""},{"location":"Builder/API%20Reference/Cleaner/event_OnObjectRemoving/#event-information","title":"Event information","text":"<pre><code>Cleaner.OnObjectRemoving :: RESignal\n</code></pre> <p>This event will fire each time an object is removed using <code>Cleaner:Remove()</code>.</p> <p>The signal object used is not a <code>RBXScriptSignal</code>, but my custom signal library called RESignal.</p>"},{"location":"Builder/API%20Reference/Cleaner/event_OnObjectRemoving/#passed-arguments","title":"Passed arguments","text":"Number Name Type Description 1 obj any The object that was removed using <code>Cleaner:Remove()</code>"},{"location":"Builder/API%20Reference/Cleaner/func_Add/","title":"Add()","text":""},{"location":"Builder/API%20Reference/Cleaner/func_Add/#function-information","title":"Function information","text":"<pre><code>function Cleaner:Add(... : any)\n</code></pre> <p>Adds objects passed to the function as a argument to the cleanup list, if a table was passed, then iterate through the values and put them to the cleanup list.</p>"},{"location":"Builder/API%20Reference/Cleaner/func_Add/#arguments","title":"Arguments","text":"<ul> <li><code>... : any</code> - The objects to be put in the cleanup list</li> </ul>"},{"location":"Builder/API%20Reference/Cleaner/func_Clean/","title":"Clean()","text":""},{"location":"Builder/API%20Reference/Cleaner/func_Clean/#function-information","title":"Function information","text":"<pre><code>function Cleaner:Clean()\n</code></pre> <p>Destroys all objects on the cleanup list.</p> <p>This WILL DESTROY all objects in the cleanup list</p> <p>If you want to remove objects from the list but not destroy them, see <code>Cleaner:Remove()</code> instead.</p>"},{"location":"Builder/API%20Reference/Cleaner/func_Remove/","title":"Remove()","text":""},{"location":"Builder/API%20Reference/Cleaner/func_Remove/#function-information","title":"Function information","text":"<pre><code>function Cleaner:Remove(... : any)\n</code></pre> <p>Removes the objects passed to the function as arguments if it exists in the list.</p> <p>This does NOT destroy the object</p> <p>The point of this function is to remove the object from the cleanup list, not destroy it. For destroying everything in the list, see <code>Cleaner:Clean()</code>.</p>"},{"location":"Builder/API%20Reference/Cleaner/func_Remove/#arguments","title":"Arguments","text":"<ul> <li><code>... : any</code> - The objects to be put in the cleanup list</li> </ul>"},{"location":"Builder/API%20Reference/Cleaner/publicvar_Objects/","title":"Objects","text":""},{"location":"Builder/API%20Reference/Cleaner/publicvar_Objects/#public-variable-information","title":"Public variable information","text":"<pre><code>Cleaner.Objects :: {any}\n</code></pre> <p>An array containing objects to be cleaned up.</p>"},{"location":"Builder/API%20Reference/Descriptor/About/","title":"About","text":"<p><code>Descriptor</code> is a object that stores the description of a instance, it has a <code>Descriptor:Build()</code> function to build the instance from that description.</p>"},{"location":"Builder/API%20Reference/Descriptor/func_Build/","title":"Build()","text":""},{"location":"Builder/API%20Reference/Descriptor/func_Build/#function-info","title":"Function info","text":"<pre><code>function Descriptor:Build()\n</code></pre> <p>Builds a instance from the description stored at <code>Descriptor.Description</code>.</p> <p>Function can error</p> <p>This function can throw a error (for example from a invalid description configuration, etc)</p>"},{"location":"Builder/API%20Reference/Descriptor/publicvar_Class/","title":"Class","text":""},{"location":"Builder/API%20Reference/Descriptor/publicvar_Class/#public-variable-information","title":"Public variable information","text":"<pre><code>Descriptor.Class :: string\n</code></pre> <p>The base class of the descriptor. When <code>Descriptor:Build()</code> is called, this is the first class created and will act as the root.</p>"},{"location":"Builder/API%20Reference/Descriptor/publicvar_CustomClassesLocation/","title":"CustomClassesLocation","text":""},{"location":"Builder/API%20Reference/Descriptor/publicvar_CustomClassesLocation/#public-variable-information","title":"Public variable information","text":"<pre><code>Descriptor.CustomClassesLocation :: Instance?\n</code></pre> <p>This is a optional field for finding custom classes, if this is set it will find custom classes from this location instead rather than finding it under a folder called <code>CustomClasses</code> under the root ModuleScript.</p> <p>See this page for more information.</p>"},{"location":"Builder/API%20Reference/Descriptor/publicvar_Description/","title":"Description","text":""},{"location":"Builder/API%20Reference/Descriptor/publicvar_Description/#public-variable-information","title":"Public variable information","text":"<pre><code>Descriptor.Description :: Description?\n</code></pre> <p>The description of this <code>Descriptor</code>. See this page for more information on descriptions.</p>"},{"location":"Builder/API%20Reference/DynamicState/About/","title":"About","text":"<p><code>DynamicState</code> is similar to a <code>State</code>, with the difference is that <code>DynamicState:Get()</code> returns from a function set for it.</p> <p>Just like <code>State</code>, you can use a <code>DynamicState</code> object directly in a <code>Description</code>, like below: </p><pre><code>{\n    [\"PropertyName\"] = DynamicState\n}\n</code></pre> However, keep in mind that <code>DynamicState</code>s do not have a changed signal, they will not be automatically updated."},{"location":"Builder/API%20Reference/DynamicState/func_Get/","title":"Get()","text":""},{"location":"Builder/API%20Reference/DynamicState/func_Get/#function-information","title":"Function information","text":"<pre><code>function DynamicState:Get()\n</code></pre> <p>Gets the value of the state by calling <code>DynamicState.Function</code>.</p>"},{"location":"Builder/API%20Reference/DynamicState/publicvar_Function/","title":"Function","text":""},{"location":"Builder/API%20Reference/DynamicState/publicvar_Function/#public-variable-information","title":"Public variable information","text":"<pre><code>DynamicState.Function :: () -&gt; (any)\n</code></pre> <p>The function that computes the state value.</p>"},{"location":"Builder/API%20Reference/Event/About/","title":"About","text":"<p><code>Event</code> is a extended <code>Resolvable</code> class that handles connecting a event with a function when building instances.</p> <p>Using it in a <code>Description</code>: </p><pre><code>{\n    [Builder.Event(\"EventName\")] = function(...) return end\n}\n</code></pre>"},{"location":"Builder/API%20Reference/Event/func_Resolve/","title":"Resolve()","text":""},{"location":"Builder/API%20Reference/Event/func_Resolve/#function-information","title":"Function information","text":"<pre><code>function Event:Resolve(inst, value: (...any) -&gt; (...any))\n</code></pre> <p>Resolves the <code>Event</code> by connecting to the target event on <code>inst</code> using <code>value</code> as the function handler.</p>"},{"location":"Builder/API%20Reference/Event/func_Resolve/#arguments","title":"Arguments","text":"<ul> <li><code>inst</code> - The instance/class where the event exists</li> <li><code>value: (...any) -&gt; (...any)</code> - The event function handler</li> </ul>"},{"location":"Builder/API%20Reference/Event/publicvar_Target/","title":"Target","text":""},{"location":"Builder/API%20Reference/Event/publicvar_Target/#public-variable-information","title":"Public variable information","text":"<pre><code>Event.Target :: string\n</code></pre> <p>The event's field name.</p>"},{"location":"Builder/API%20Reference/Method/About/","title":"About","text":"<p><code>Method</code> is a extended <code>Resolvable</code> class that handles calling a method when building instances.</p> <p>Using it in a <code>Description</code>: </p><pre><code>{\n    [Builder.Method(\"MethodName\")] = {\"Arg1\", \"Arg2\"}\n}\n</code></pre>"},{"location":"Builder/API%20Reference/Method/func_Resolve/","title":"Resolve()","text":""},{"location":"Builder/API%20Reference/Method/func_Resolve/#function-information","title":"Function information","text":"<pre><code>function Method:Resolve(inst, value: {any})\n</code></pre> <p>Resolves the <code>Method</code> by calling the method on <code>inst</code> with the unpacked values of <code>value</code> passed as argument.</p>"},{"location":"Builder/API%20Reference/Method/func_Resolve/#arguments","title":"Arguments","text":"<ul> <li><code>inst</code> - The instance/class where the method exists</li> <li><code>value: {any}</code> - The arguments of the function, this table will be unpacked when resolved using <code>table.unpack</code></li> </ul>"},{"location":"Builder/API%20Reference/Method/publicvar_Target/","title":"Target","text":""},{"location":"Builder/API%20Reference/Method/publicvar_Target/#public-variable-information","title":"Public variable information","text":"<pre><code>Method.Target :: string\n</code></pre> <p>The method's field name.</p>"},{"location":"Builder/API%20Reference/MultiState/About/","title":"About","text":"<p><code>MultiState</code> is a object where you can store values attached to a key/name, similar to dictionaries.</p> <p>You cannot directly use a <code>MultiState</code> object inside a <code>Description</code>, unlike <code>State</code> objects, instead you must use <code>MultiStateResolvable</code>.</p>"},{"location":"Builder/API%20Reference/MultiState/event_OnChanged/","title":"OnChanged","text":""},{"location":"Builder/API%20Reference/MultiState/event_OnChanged/#event-information","title":"Event information","text":"<pre><code>MultiState.OnChanged :: RESignal\n</code></pre> <p>This event fires each time <code>MultiState:Set()</code> called.</p> <p>The signal object used is not a <code>RBXScriptSignal</code>, but my custom signal library called RESignal.</p>"},{"location":"Builder/API%20Reference/MultiState/event_OnChanged/#passed-arguments","title":"Passed arguments","text":"Number Name Type Description 1 statename any The state name 2 newval any The new value 3 oldval any The old value"},{"location":"Builder/API%20Reference/MultiState/func_Get/","title":"Get()","text":""},{"location":"Builder/API%20Reference/MultiState/func_Get/#function-information","title":"Function information","text":"<pre><code>function MultiState:Get(name: any)\n</code></pre> <p>Gets the value from the <code>MultiState</code> using <code>name</code> as the key.</p>"},{"location":"Builder/API%20Reference/MultiState/func_Set/","title":"Set()","text":""},{"location":"Builder/API%20Reference/MultiState/func_Set/#function-information","title":"Function information","text":"<pre><code>function MultiState:Set(name: any, value: any)\n</code></pre> <p>Sets the value in the <code>MultiState</code> using <code>name</code> as the key and <code>value</code> as the new value, and then fires all callbacks connected to <code>MultiState.OnChanged</code>.</p>"},{"location":"Builder/API%20Reference/MultiState/publicvar_States/","title":"States","text":""},{"location":"Builder/API%20Reference/MultiState/publicvar_States/#public-variable-information","title":"Public variable information","text":"<pre><code>MultiState.States :: {[any]: any}\n</code></pre> <p>This is variable stores the state values.</p>"},{"location":"Builder/API%20Reference/MultiStateResolvable/About/","title":"About","text":"<p><code>MultiStateResolvable</code> is a extended <code>Resolvable</code> class that handles setting a property using a state from a <code>MultiState</code>.</p> <p>It works the same as if putting a state on a description, it will also detect state changes and changes the property if the state that was changed was the target state used in this resolvable.</p> <p>Using it in a <code>Description</code>: </p><pre><code>{\n    [\"PropertyName\"] = Builder.MultiStateResolvable(MultiState, \"StateName\")\n}\n</code></pre>"},{"location":"Builder/API%20Reference/MultiStateResolvable/func_Resolve/","title":"Resolve()","text":""},{"location":"Builder/API%20Reference/MultiStateResolvable/func_Resolve/#function-information","title":"Function information","text":"<pre><code>function MultiStateResolvable:Resolve(inst, property: string)\n</code></pre> <p>Resolves the <code>MultiStateResolvable</code> by setting the property based on <code>property</code> on <code>inst</code> with the value from the <code>MultiState</code>'s state</p>"},{"location":"Builder/API%20Reference/MultiStateResolvable/func_Resolve/#arguments","title":"Arguments","text":"<ul> <li><code>inst</code> - The target instance/class where the property will be set.</li> <li><code>property: string</code> - The name of the property to be set.</li> </ul>"},{"location":"Builder/API%20Reference/MultiStateResolvable/publicvar_MultiState/","title":"MultiState","text":""},{"location":"Builder/API%20Reference/MultiStateResolvable/publicvar_MultiState/#public-variable-information","title":"Public variable information","text":"<pre><code>MultiStateResolvable.Target :: string\n</code></pre> <p>The <code>MultiState</code> used to get the state value.</p>"},{"location":"Builder/API%20Reference/MultiStateResolvable/publicvar_Target/","title":"Target","text":""},{"location":"Builder/API%20Reference/MultiStateResolvable/publicvar_Target/#public-variable-information","title":"Public variable information","text":"<pre><code>MultiStateResolvable.Target :: string\n</code></pre> <p>The target state name.</p>"},{"location":"Builder/API%20Reference/PropertyChangedSignal/About/","title":"About","text":"<p><code>PropertyChangedSignal</code> is a extended <code>Resolvable</code> class that handles property changes by connecting the passed function handler using <code>(Instance | Class):GetPropertyChangedSignal()</code>.</p> <p>Custom classes note</p> <p>If you are using this in a custom class based <code>Description</code>, ensure it has a <code>GetPropertyChangedSignal</code> function, the first argument will be a string containing the target property name. It's expected to return a <code>RBXScriptSignal</code> (or anything with a <code>:Connect()</code> function)</p> <p>Using it in a <code>Description</code>: </p><pre><code>{\n    [Builder.PropertyChangedSignal(\"PropertyName\")] = function() return end\n}\n</code></pre>"},{"location":"Builder/API%20Reference/PropertyChangedSignal/func_Resolve/","title":"Resolve()","text":""},{"location":"Builder/API%20Reference/PropertyChangedSignal/func_Resolve/#function-information","title":"Function information","text":"<pre><code>function PropertyChangedSignal:Resolve(inst, value: (...any) -&gt; (...any))\n</code></pre> <p>Resolves the <code>PropertyChangedSignal</code> by calling <code>(Instance | Class):GetPropertyChangedSignal()</code> with the property name as the first argument and then connects the event returned by the function using <code>value</code>.</p>"},{"location":"Builder/API%20Reference/PropertyChangedSignal/func_Resolve/#arguments","title":"Arguments","text":"<ul> <li><code>inst</code> - The target instance/class</li> <li><code>value: (...any) -&gt; (...any)</code> - The function to be connected handling property changes</li> </ul>"},{"location":"Builder/API%20Reference/PropertyChangedSignal/publicvar_Target/","title":"Target","text":""},{"location":"Builder/API%20Reference/PropertyChangedSignal/publicvar_Target/#public-variable-information","title":"Public variable information","text":"<pre><code>PropertyChangedSignal.Target :: string\n</code></pre> <p>The property's field name to be used for detecting changes.</p>"},{"location":"Builder/API%20Reference/Resolvable/About/","title":"About","text":"<p>This is a abstract class</p> <p>This class has no real use other than as a abstract class to be extended.</p> <p><code>Resolvable</code> is a object that you can put in a <code>Description</code>, when <code>Descriptor:Build()</code> is called, if it finds a <code>Resolvable</code> object it will call <code>Resolvable:Resolve()</code> to resolve the object.</p>"},{"location":"Builder/API%20Reference/Resolvable/func_Resolve/","title":"Resolve()","text":""},{"location":"Builder/API%20Reference/Resolvable/func_Resolve/#function-information","title":"Function information","text":"<pre><code>function Resolvable:Resolve(inst, value: any)\n</code></pre> <p>Resolves the resolvable using the provided instance and value.</p>"},{"location":"Builder/API%20Reference/State/About/","title":"About","text":"<p><code>State</code> is a object that stores a value, it's basically just like a variable.</p> <p>You can use a <code>State</code> object directly in a <code>Description</code>, like below: </p><pre><code>{\n    [\"PropertyName\"] = State\n}\n</code></pre> It will also use <code>State.OnChanged</code> for detecting changes via <code>State:Set()</code> and will automatically set the property with the new value."},{"location":"Builder/API%20Reference/State/event_OnChanged/","title":"OnChanged","text":""},{"location":"Builder/API%20Reference/State/event_OnChanged/#event-information","title":"Event information","text":"<pre><code>State.OnChanged :: RESignal\n</code></pre> <p>This event fires each time <code>State:Set()</code> called.</p> <p>The signal object used is not a <code>RBXScriptSignal</code>, but my custom signal library called RESignal.</p>"},{"location":"Builder/API%20Reference/State/event_OnChanged/#passed-arguments","title":"Passed arguments","text":"Number Name Type Description 1 newval any The new value 2 oldval any The old value"},{"location":"Builder/API%20Reference/State/func_Get/","title":"Get()","text":""},{"location":"Builder/API%20Reference/State/func_Get/#function-information","title":"Function information","text":"<pre><code>function State:Get()\n</code></pre> <p>Gets the value of the state.</p>"},{"location":"Builder/API%20Reference/State/func_Set/","title":"Set()","text":""},{"location":"Builder/API%20Reference/State/func_Set/#function-information","title":"Function information","text":"<pre><code>function State:Set(value: any)\n</code></pre> <p>Sets the value of the state with <code>value</code>, and then fires all callbacks connected to <code>State.OnChanged</code>.</p>"},{"location":"Builder/API%20Reference/State/publicvar_Value/","title":"Value","text":""},{"location":"Builder/API%20Reference/State/publicvar_Value/#public-variable-information","title":"Public variable information","text":"<pre><code>State.Value :: any\n</code></pre> <p>This variable stores the current value of the state.</p>"},{"location":"Builder/API%20Reference/Types/type_Description/","title":"Description","text":""},{"location":"Builder/API%20Reference/Types/type_Description/#type-information","title":"Type information","text":"<pre><code>export type Description = {[string | number | Event | Method | PropertyChangedSignal | Attribute | AttributeChangedSignal]: any}\n</code></pre> <p>A description is a dictionary-array mix. The key of the array is either a property name (string) or a resolvable object. The value is usually another Instance, <code>Descriptor</code>, a <code>State</code>, or the value for the resolvable/property.</p>"},{"location":"Builder/API%20Reference/Types/type_Description/#example","title":"Example","text":"<pre><code>local Builder = require(path.to.builder)\nlocal Descriptor = Builder.Descriptor\n\nlocal NameState = Builder.State(\"Hello\")\nNameState:Set(\"Hello World\")\n\nlocal MultiStateObj = Builder.Multistate({Anchored = false})\nMultiStateObj:Set(\"Anchored\", true)\n\nlocal AInstance = Instance.new(\"SurfaceGui\")\n\nlocal PLDescriptor = Descriptor(\"PointLight\", { Name = \"Yes\" })\n\nlocal FinalPartDescriptor = Descriptor(\"Part\", {\n    Name = NameState;\n    Anchored = Builder.MultiStateResolvable(MultiStateObj, \"Anchored\");\n    CanCollide = true;\n    Transparency = 0.5;\n    Material = Enum.Material.Glass;\n    [Builder.Attribute(\"TestsEnabled\")] = true;\n    [Builder.AttributeChangedSignal(\"TestsEnabled\")] = print;\n    [Builder.PropertyChangedSignal(\"Anchored\")] = warn;\n    [Builder.Event(\"DescendantAdded\")] = print;\n    [Builder.Method(\"GetPivot\")] = print;\n    AInstance;\n    PLDescriptor;\n})\n\nFinalPartDescriptor:Build().Parent = workspace\n</code></pre>"},{"location":"ColorPickerModule/About/","title":"About","text":"<p>This module is designed for letting players pick a color (from their screens aka from the client) and then the result can be returned back to the server.</p> <p>NOTE: No longer maintained.</p>"},{"location":"ColorPickerModule/About/#get-the-module","title":"Get the module","text":"<ul> <li>Roblox Model</li> </ul>"},{"location":"ColorPickerModule/About/#credits","title":"Credits","text":"<ul> <li>boatbomber - Made changes to make EgoMoose's design to be better.</li> <li>EgoMoose - Made initial prompt design and script.</li> <li>RadiatedExodus (ItzEthanPlayz_YT) - Using the gui to create this module.</li> </ul>"},{"location":"ColorPickerModule/Usage/","title":"Usage","text":"<p>Not available</p>"},{"location":"ColorPickerModule/API%20Reference/enum_returnType/","title":"returnType","text":"<pre><code>ColorPickerModuleEnum ColorPickerModuleEnum.returnType\n</code></pre> <p>Contains 4 enum members:</p> Member Description brickColor Indicates that the return type will be a <code>BrickColor</code>. color3 Indicates that the return type will be a <code>Color3</code>. rgbTableDictionary Indicates that the return type will be a dictionary table with keys R, G, and B ({R=R, G=G, B=B}) perValue Indicates that the return type will be a 3 numbers in a ordered way: R, G, B"},{"location":"ColorPickerModule/API%20Reference/enum_returnType/#used-by","title":"Used by","text":"<ul> <li><code>ColorPickerModule.promptPickColor()</code></li> </ul>"},{"location":"ColorPickerModule/API%20Reference/func_promptPickColor/","title":"promptPickColor()","text":"<pre><code>function ColorPickerModule.promptPickColor(player: Player, allowCancel: boolean, returnType: ColorPickerModuleEnum.returnType): BrickColor | Color3 | table | number\n</code></pre> <p>Returns either a BrickColor, Color3, table, or number based on what is passed <code>returnType</code>.</p>"},{"location":"ColorPickerModule/API%20Reference/func_promptPickColor/#return-types","title":"Return types:","text":"Passed argument Returns ColorPickerModuleEnum.returnType.brickColor Returns a <code>BrickColor</code> based on the player's input. ColorPickerModuleEnum.returnType.color3 Returns a <code>Color3</code> based on the player's input. ColorPickerModuleEnum.returnType.rgbTableDictionary Returns a dictionary table with keys R, G, and B ({R=R, G=G, B=B}) based on the player's input. ColorPickerModuleEnum.returnType.perValue Returns 3 numbers in a ordered way: R, G, B based on the player's input."},{"location":"DeviceInfo/About/","title":"About","text":"<p>Note</p> <ul> <li>DeviceInfo only works on the client. Attempting to use this on the server will result a error upon loading the library.</li> <li>As of October 4 2021, detection is no longer guranteed to be 100% correct as there is ways the detection can lead to false positives.</li> </ul> A note to users upgrading from V1 to V2 <p>The V2 update changes a lot of method names and how they work, it is suggested to re-read the source-code, the API reference, and update your code to match the new update.</p> <p>DeviceInfo is a module designed to try and detect the player's platform, device type, etc. Inspired by World Builder's device detection, this module uses hacky ways to try to detect the device type, platform, etc however it should be noted that detection cannot be guranteed 100% correct.</p>"},{"location":"DeviceInfo/About/#get-the-module","title":"Get the module","text":"<ul> <li>GitHub gist</li> <li>Roblox model</li> <li>Roblox place</li> </ul>"},{"location":"DeviceInfo/Usage/","title":"Usage","text":"<p>Not available</p>"},{"location":"DeviceInfo/API%20Reference/enum_DeviceOrientation/","title":"DeviceOrientation","text":"<pre><code>DeviceInfoEnum DeviceInfo.DeviceOrientation\n</code></pre> <p>Contains 2 enum members:</p> Member Description Portrait Determines that the device orientation is portrait. Landscape Determines that the device orientation is landscape."},{"location":"DeviceInfo/API%20Reference/enum_DeviceOrientation/#used-by","title":"Used by","text":"<ul> <li><code>DeviceInfo.GetDeviceOrientation()</code></li> </ul>"},{"location":"DeviceInfo/API%20Reference/enum_DeviceType/","title":"DeviceType","text":"<pre><code>DeviceInfoEnum DeviceInfo.DeviceType\n</code></pre> <p>Contains 5 enum members:</p> Member Description Computer Determines that the device type is a computer. Phone Determines that the device type is a phone. Tablet Determines that the device type is a tablet. Console Determines that the device type is a console. TouchscreenComputer Determines that the device type is a touchscreen computer."},{"location":"DeviceInfo/API%20Reference/enum_DeviceType/#used-by","title":"Used by","text":"<ul> <li><code>DeviceInfo.GetDeviceType()</code></li> </ul>"},{"location":"DeviceInfo/API%20Reference/enum_InputType/","title":"InputType","text":"<pre><code>DeviceInfoEnum DeviceInfo.InputType\n</code></pre> <p>Contains 6 enum members:</p> Member Description KeyboardMouse Determines that the device input type is keyboard and mouse. Mouse Determines that the device input type is mouse. Keyboard Determines that the device input type is keyboard. Gamepad Determines that the device input type is gamepas/controller. Touchscreen Determines that the device input type is touchscreen. VR Determines that the device input type is VR."},{"location":"DeviceInfo/API%20Reference/enum_InputType/#used-by","title":"Used by","text":"<ul> <li><code>DeviceInfo.GetDeviceinput()</code></li> </ul>"},{"location":"DeviceInfo/API%20Reference/enum_PlatformType/","title":"PlatformType","text":"<pre><code>DeviceInfoEnum DeviceInfo.PlatformType\n</code></pre> <p>Contains 3 enum members:</p> Member Description Computer Device platform is a computer. Mobile Device platform is a mobile device. Console Device platform is a console. <p>If you would like to determine if a user is using a phone or tablet, see <code>DeviceInfo.GetDeviceType()</code>.</p>"},{"location":"DeviceInfo/API%20Reference/enum_PlatformType/#used-by","title":"Used by","text":"<ul> <li><code>DeviceInfo.GetDevicePlatform()</code></li> </ul>"},{"location":"DeviceInfo/API%20Reference/event_GraphicsQualityChanged/","title":"GraphicsQualityChanged","text":"<pre><code>RBXScriptSignal DeviceInfo.GraphicsQualityChanged: Enum.SavedQualitySetting\n</code></pre> <p>Upon fired, passes a <code>Enum.SavedQualitySetting</code> as an argument.</p>"},{"location":"DeviceInfo/API%20Reference/event_InputChanged/","title":"InputChanged","text":"<pre><code>RBXScriptSignal DeviceInfo.InputChanged: DeviceInfoEnum.InputType\n</code></pre> <p>Upon fired, passes a <code>DeviceInfoEnum.InputType</code> as an argument.</p>"},{"location":"DeviceInfo/API%20Reference/event_OrientationChanged/","title":"OrientationChanged","text":"<pre><code>RBXScriptSignal DeviceInfo.OrientationChanged: DeviceInfoEnum.DeviceOrientation\n</code></pre> <p>Upon fired, passes a <code>DeviceInfoEnum.DeviceOrientation</code> as an argument.</p>"},{"location":"DeviceInfo/API%20Reference/event_WindowSizeChanged/","title":"WindowSizeChanged","text":"<pre><code>RBXScriptSignal DeviceInfo.WindowSizeChanged: Vector2\n</code></pre> <p>Upon fired, passes a <code>Vector2</code> as an argument.</p>"},{"location":"DeviceInfo/API%20Reference/func_GetDeviceInput/","title":"GetDeviceInput()","text":"<pre><code>function DeviceInfo.GetDeviceInput(): DeviceInfoEnum.InputType\n</code></pre> <p>Returns <code>DeviceInfoEnum.InputType</code>.</p>"},{"location":"DeviceInfo/API%20Reference/func_GetDeviceOrientation/","title":"GetDeviceOrientation()","text":"<pre><code>function DeviceInfo.GetDeviceOrientation(): DeviceInfoEnum.DeviceOrientation\n</code></pre> <p>Returns <code>DeviceInfoEnum.DeviceOrientation</code>.</p>"},{"location":"DeviceInfo/API%20Reference/func_GetDevicePlatform/","title":"GetDevicePlatform()","text":"<pre><code>function DeviceInfo.GetDevicePlatform(): DeviceInfoEnum.PlatformType\n</code></pre> <p>Returns <code>DeviceInfoEnum.PlatformType</code>. Used to determine's the device platform. (Computer, console, or mobile)</p> <p>Not to be confused with <code>DeviceInfo.GetDeviceType()</code>.</p>"},{"location":"DeviceInfo/API%20Reference/func_GetDeviceType/","title":"GetDeviceType()","text":"<pre><code>function DeviceInfo.GetDeviceType(): DeviceInfoEnum.DeviceType\n</code></pre> <p>Returns <code>DeviceInfoEnum.DeviceType</code>. Used to determine the device's type. (Computer, phone, tablet, console, touchscreen computer)</p> <p>Not to be confused with <code>DeviceInfo.GetDevicePlatform()</code>.</p>"},{"location":"DeviceInfo/API%20Reference/func_GetGraphicsQuality/","title":"GetGraphicsQuality()","text":"<pre><code>function DeviceInfo.GetGraphicsQuality(): Enum.SavedQualitySetting\n</code></pre> <p>Returns <code>Enum.SavedQualitySetting</code>. (equivalent of <code>UserSettings():GetService(\"UserGameSettings\").SavedQualityLevel</code>)</p>"},{"location":"DeviceInfo/API%20Reference/func_GetWindowSize/","title":"GetWindowSize()","text":"<pre><code>function DeviceInfo.GetWindowSize(): Vector2\n</code></pre> <p>Returns a <code>Vector2</code> of the window size. (equivalent of <code>workspace.CurrentCamera.ViewportSize</code>)</p>"},{"location":"GeometryLinesBackground/About/","title":"About","text":"<p>This module allows renders lines based on randomly moving dots and how far they are.</p> <p>This module is unefficient!</p> <p>Using high dot counts can lag the player depending on the device's hardware capabilities!</p>"},{"location":"GeometryLinesBackground/About/#showcase","title":"Showcase","text":""},{"location":"GeometryLinesBackground/About/#get-the-modulesee-it-in-action","title":"Get the module/see it in action","text":"<ul> <li>GitHub Gist (view source code from web browser)</li> <li>Roblox model</li> <li>Roblox place (uncopylocked)</li> </ul>"},{"location":"GeometryLinesBackground/API%20Reference/func_IsRendering/","title":"IsRendering()","text":""},{"location":"GeometryLinesBackground/API%20Reference/func_IsRendering/#function-info","title":"Function info","text":"<pre><code>function GeometryLinesBackground:IsRendering()\n</code></pre> <p>Returns if the renderer is active or not. Alternatively use the public variable <code>GeometryLinesBackground.Rendering</code> for checking.</p>"},{"location":"GeometryLinesBackground/API%20Reference/func_SetAmountOfDots/","title":"SetAmountOfDots()","text":""},{"location":"GeometryLinesBackground/API%20Reference/func_SetAmountOfDots/#function-info","title":"Function info","text":"<pre><code>function GeometryLinesBackground:SetAmountOfDots(newamount: number)\n</code></pre> <p>Sets the amount of dots.</p> <p>Calling this function while the renderer is still active will error</p> <p>Calling this function while the renderer is still active will cause a error! Ensure the renderer is already off before calling this function.</p> <p>Do not set high amount of dots!</p> <p>This module is probably unefficient! Do not set a high amount of dots to prevent perfomance issues.</p>"},{"location":"GeometryLinesBackground/API%20Reference/func_SetAmountOfDots/#arguments","title":"Arguments","text":"<ul> <li>newamount: number - The new amount of dots in numbers.</li> </ul>"},{"location":"GeometryLinesBackground/API%20Reference/func_SetDotBackgroundColor3/","title":"SetDotBackgroundColor3()","text":""},{"location":"GeometryLinesBackground/API%20Reference/func_SetDotBackgroundColor3/#function-info","title":"Function info","text":"<pre><code>function GeometryLinesBackground:SetDotBackgroundColor3(newc3: Color3)\n</code></pre> <p>Sets the dot's default BackgroundColor3</p> <p>Calling this function while the renderer is still active will error</p> <p>Calling this function while the renderer is still active will cause a error! Ensure the renderer is already off before calling this function.</p>"},{"location":"GeometryLinesBackground/API%20Reference/func_SetDotBackgroundColor3/#arguments","title":"Arguments","text":"<ul> <li>newc3: Color3 - The new Color3 to be set at the dot's BackgroundColor3 when the <code>GeometryLinesBackground:StartRender()</code> is called.</li> </ul>"},{"location":"GeometryLinesBackground/API%20Reference/func_SetLineBackgroundColor3/","title":"SetLineBackgroundColor3()","text":""},{"location":"GeometryLinesBackground/API%20Reference/func_SetLineBackgroundColor3/#function-info","title":"Function info","text":"<pre><code>function GeometryLinesBackground:SetLineBackgroundColor3(newc3: Color3)\n</code></pre> <p>Sets the line's default BackgroundColor3</p> <p>Calling this function while the renderer is still active will error</p> <p>Calling this function while the renderer is still active will cause a error! Ensure the renderer is already off before calling this function.</p>"},{"location":"GeometryLinesBackground/API%20Reference/func_SetLineBackgroundColor3/#arguments","title":"Arguments","text":"<ul> <li>newc3: Color3 - The new Color3 to be set at the dot's BackgroundColor3 when the <code>GeometryLinesBackground:StartRender()</code> is called.</li> </ul>"},{"location":"GeometryLinesBackground/API%20Reference/func_SetRootFrame/","title":"SetRootFrame()","text":""},{"location":"GeometryLinesBackground/API%20Reference/func_SetRootFrame/#function-info","title":"Function info","text":"<pre><code>function GeometryLinesBackground:SetRootFrame(newrootframe: GuiObject)\n</code></pre> <p>Sets the renderer root frame.</p> <p>Calling this function while the renderer is still active will error</p> <p>Calling this function while the renderer is still active will cause a error! Ensure the renderer is already off before calling this function.</p>"},{"location":"GeometryLinesBackground/API%20Reference/func_SetRootFrame/#arguments","title":"Arguments","text":"<ul> <li>newrootframe: GuiObject - The new root frame.</li> </ul>"},{"location":"GeometryLinesBackground/API%20Reference/func_SetTransparencyEnabled/","title":"SetTransparencyEnabled()","text":""},{"location":"GeometryLinesBackground/API%20Reference/func_SetTransparencyEnabled/#function-info","title":"Function info","text":"<pre><code>function GeometryLinesBackground:SetTransparencyEnabled(newtoggle: boolean)\n</code></pre> <p>Sets whether the transparency effect is enabled or not based on <code>newtoggle</code>.</p> <p>The transparency effect mentioned here is the effect where a line becomes more opaqe the more farther they are between 2 lines.</p> <p>Calling this function while the renderer is still active will error</p> <p>Calling this function while the renderer is still active will cause a error! Ensure the renderer is already off before calling this function.</p>"},{"location":"GeometryLinesBackground/API%20Reference/func_SetTransparencyEnabled/#arguments","title":"Arguments","text":"<ul> <li>newtoggle: boolean - Whether the transparency effect is enabled or not</li> </ul>"},{"location":"GeometryLinesBackground/API%20Reference/func_StartRender/","title":"StartRender()","text":""},{"location":"GeometryLinesBackground/API%20Reference/func_StartRender/#function-info","title":"Function info","text":"<pre><code>function GeometryLinesBackground:StartRender(overridecurrentrendering: boolean?): boolean\n</code></pre> <p>Start rendering the geometry lines effect visualization, if <code>overridecurrentrendering</code> is true and the renderer is still active, it will call <code>GeometryLinesBackground:StopRender()</code> and then start the renderer again, otherwise if you call this function while the renderer is active, it will error.</p> <p>Use with caution! Check if the renderer is already active or not.</p> <p>Calling this function while the renderer is not active and <code>overridecurrentrendering</code> is passed as nil/false will result a error!</p>"},{"location":"GeometryLinesBackground/API%20Reference/func_StartRender/#arguments","title":"Arguments","text":"<ul> <li>overridecurrentrendering: boolean? - If the renderer is already active, override it by calling <code>GeometryLinesBackground:StopRender()</code> and start the renderer process again.</li> </ul>"},{"location":"GeometryLinesBackground/API%20Reference/func_StopRender/","title":"StopRender()","text":""},{"location":"GeometryLinesBackground/API%20Reference/func_StopRender/#function-info","title":"Function info","text":"<pre><code>function GeometryLinesBackground:StopRender()\n</code></pre> <p>Stops the renderer and destroys any dots and lines made by the renderer.</p>"},{"location":"GeometryLinesBackground/API%20Reference/func_new/","title":"new()","text":""},{"location":"GeometryLinesBackground/API%20Reference/func_new/#function-info","title":"Function info","text":"<pre><code>function GeometryLinesBackground.new(amountofdots: number?, rootframe: GuiObject?, randomseed: number?): GeometryLinesBackground\n</code></pre> <p>Creates a new <code>GeometryLinesBackground</code> object.</p> <p>Another way to create a new <code>GeometryLinesBackground</code></p> <p>Simply call the table you got after requiring the module with the same arguments as <code>GeometryLinesBackground.new()</code></p>"},{"location":"GeometryLinesBackground/API%20Reference/func_new/#arguments","title":"Arguments","text":"<ul> <li>amountofdots: number? - The amount of dots (default 25)</li> <li>rootframe: GuiObject? - The root frame, this is where all the dots and lines will go and be rendered at until you change it again.</li> <li>randomseed: number? - The random seed for use at <code>Random.new()</code> (default is nil)</li> </ul>"},{"location":"GeometryLinesBackground/API%20Reference/publicvar_AmountOfDots/","title":"AmountOfDots","text":""},{"location":"GeometryLinesBackground/API%20Reference/publicvar_AmountOfDots/#publicexported-variable-information","title":"Public/exported variable information","text":"<pre><code>GeometryLinesBackground.AmountOfDots :: number\n</code></pre> <p>The current amount of dots that are set, you can set the amount of dots by calling <code>GeometryLinesBackground:SetAmountOfDots()</code>.</p>"},{"location":"GeometryLinesBackground/API%20Reference/publicvar_DotBackgroundColor3/","title":"DotBackgroundColor3","text":""},{"location":"GeometryLinesBackground/API%20Reference/publicvar_DotBackgroundColor3/#publicexported-variable-information","title":"Public/exported variable information","text":"<pre><code>GeometryLinesBackground.DotBackgroundColor3 :: Color3\n</code></pre> <p>The current default BackgroundColor3 for the dot, you can set the default BackgroundColor3 for the dot by calling <code>GeometryLinesBackground:SetDotBackgroundColor3()</code>.</p>"},{"location":"GeometryLinesBackground/API%20Reference/publicvar_LineBackgroundColor3/","title":"LineBackgroundColor3","text":""},{"location":"GeometryLinesBackground/API%20Reference/publicvar_LineBackgroundColor3/#publicexported-variable-information","title":"Public/exported variable information","text":"<pre><code>GeometryLinesBackground.LineBackgroundColor3 :: Color3\n</code></pre> <p>The current default BackgroundColor3 for the line, you can set the default BackgroundColor3 for the line by calling <code>GeometryLinesBackground:SetLineBackgroundColor3()</code>.</p>"},{"location":"GeometryLinesBackground/API%20Reference/publicvar_Rendering/","title":"Rendering","text":""},{"location":"GeometryLinesBackground/API%20Reference/publicvar_Rendering/#publicexported-variable-information","title":"Public/exported variable information","text":"<pre><code>GeometryLinesBackground.Rendering :: boolean\n</code></pre> <p>Shows whether the renderer is active or not, see <code>GeometryLinesBackground:StartRender()</code> and <code>GeometryLinesBackground:StopRender()</code>.</p>"},{"location":"GeometryLinesBackground/API%20Reference/publicvar_RootFrame/","title":"RootFrame","text":""},{"location":"GeometryLinesBackground/API%20Reference/publicvar_RootFrame/#publicexported-variable-information","title":"Public/exported variable information","text":"<pre><code>GeometryLinesBackground.RootFrame :: Instance\n</code></pre> <p>The current rootframe, you can set the rootframe by calling <code>GeometryLinesBackground:SetRootFrame()</code>.</p>"},{"location":"GeometryLinesBackground/API%20Reference/publicvar_TransparencyEnabled/","title":"TransparencyEnabled","text":""},{"location":"GeometryLinesBackground/API%20Reference/publicvar_TransparencyEnabled/#publicexported-variable-information","title":"Public/exported variable information","text":"<pre><code>GeometryLinesBackground.TransparencyEnabled :: boolean\n</code></pre> <p>Shows whether transparency effects are enabled or not, you can set whether transparency effects are enabled or not calling <code>GeometryLinesBackground:SetTransparencyEnabled()</code>.</p>"},{"location":"LuaTextBox/About/","title":"About","text":"<p>LuaTextBox is a module for providing a Lua IDE in Roblox.</p> <p>In heavy development, do not use in production</p> <p>This module is currently under heavy development, it is not suggested to use it in a production environment.</p>"},{"location":"LuaTextBox/About/#get-the-module","title":"Get the module","text":"<ul> <li>GitHub Repository</li> </ul>"},{"location":"LuaTextBox/API%20Reference/func_new/","title":"new()","text":""},{"location":"LuaTextBox/API%20Reference/func_new/#function-information","title":"Function information","text":"<pre><code>local function LuaTextBox(autocompletetargetamount: number?): LuaTextBox\n</code></pre> <p>Constructor for <code>LuaTextBox</code></p>"},{"location":"LuaTextBox/API%20Reference/func_new/#arguments","title":"Arguments","text":"<ul> <li><code>autocompletetargetamount: number?</code> - Maximum amount of autocomplete targets being shown to the user</li> </ul>"},{"location":"LuaTextBox/API%20Reference/LuaTextBox/func_DoAutocomplete/","title":"DoAutocomplete()","text":""},{"location":"LuaTextBox/API%20Reference/LuaTextBox/func_DoAutocomplete/#function-information","title":"Function information","text":"<pre><code>function LuaTextBox:DoAutocomplete(word: string, cpuaw: number)\n</code></pre> <p>Triggers autocomplete.</p>"},{"location":"LuaTextBox/API%20Reference/LuaTextBox/func_DoAutocomplete/#arguments","title":"Arguments","text":"<ul> <li><code>word: string</code> - The word</li> <li><code>cpuaw: number</code> - Cursor position until the word</li> </ul>"},{"location":"LuaTextBox/API%20Reference/LuaTextBox/func_IsAutocompleting/","title":"IsAutocompleting()","text":""},{"location":"LuaTextBox/API%20Reference/LuaTextBox/func_IsAutocompleting/#function-information","title":"Function information","text":"<pre><code>function LuaTextBox:IsAutocompleting()\n</code></pre> <p>Returns wether or not the autocomplete frame is visible or not.</p>"},{"location":"LuaTextBox/API%20Reference/LuaTextBox/func_SetName/","title":"SetName()","text":""},{"location":"LuaTextBox/API%20Reference/LuaTextBox/func_SetName/#function-information","title":"Function information","text":"<pre><code>function LuaTextBox:SetName(name: string)\n</code></pre> <p>Sets the <code>Name</code> field on the <code>LuaTextBox</code> object and on the instance.</p>"},{"location":"LuaTextBox/API%20Reference/LuaTextBox/func_SetName/#arguments","title":"Arguments","text":"<ul> <li><code>name: string</code> - The new name</li> </ul>"},{"location":"LuaTextBox/API%20Reference/LuaTextBox/func_SetParent/","title":"SetParent()","text":""},{"location":"LuaTextBox/API%20Reference/LuaTextBox/func_SetParent/#function-information","title":"Function information","text":"<pre><code>function LuaTextBox:SetParent(parent: Instance?)\n</code></pre> <p>Sets the <code>Parent</code> field on the <code>LuaTextBox</code> object and on the instance.</p>"},{"location":"LuaTextBox/API%20Reference/LuaTextBox/func_SetParent/#arguments","title":"Arguments","text":"<ul> <li><code>parent: Instance?</code> - The new parent</li> </ul>"},{"location":"LuaTextBox/API%20Reference/LuaTextBox/func_TerminateCurrentAutocompleteSession/","title":"TerminateCurrentAutocompleteSession()","text":""},{"location":"LuaTextBox/API%20Reference/LuaTextBox/func_TerminateCurrentAutocompleteSession/#function-information","title":"Function information","text":"<pre><code>function LuaTextBox:TerminateCurrentAutocompleteSession()\n</code></pre> <p>Terminates the currently running autocomplete session.</p>"},{"location":"LuaTextBox/API%20Reference/LuaTextBox/publicvar_AutocompleteConnections/","title":"AutocompleteConnections","text":""},{"location":"LuaTextBox/API%20Reference/LuaTextBox/publicvar_AutocompleteConnections/#public-variable-information","title":"Public variable information","text":"<pre><code>LuaTextBox.AutocompleteConnections :: {RBXScriptSignal}\n</code></pre> <p>This variable is a table containing connections related to the autocomplete function.</p>"},{"location":"LuaTextBox/API%20Reference/LuaTextBox/publicvar_AutocompleteFrame/","title":"AutocompleteFrame","text":""},{"location":"LuaTextBox/API%20Reference/LuaTextBox/publicvar_AutocompleteFrame/#public-variable-information","title":"Public variable information","text":"<pre><code>LuaTextBox.AutocompleteFrame :: Frame\n</code></pre> <p>This variable is the autocomplete ui frame.</p>"},{"location":"LuaTextBox/API%20Reference/LuaTextBox/publicvar_AutocompleteTargets/","title":"AutocompleteTargets","text":""},{"location":"LuaTextBox/API%20Reference/LuaTextBox/publicvar_AutocompleteTargets/#public-variable-information","title":"Public variable information","text":"<pre><code>LuaTextBox.AutocompleteTargets :: {AutocompleteTarget}\n</code></pre> <p>This variable is a table containing autocomplete target fields inside a autocomplete frame.</p>"},{"location":"LuaTextBox/API%20Reference/LuaTextBox/publicvar_CursorPosition/","title":"CursorPosition","text":""},{"location":"LuaTextBox/API%20Reference/LuaTextBox/publicvar_CursorPosition/#public-variable-information","title":"Public variable information","text":"<pre><code>LuaTextBox.CursorPosition :: number\n</code></pre> <p>EditorInput's CursorPosition.</p>"},{"location":"LuaTextBox/API%20Reference/LuaTextBox/publicvar_EditorInput/","title":"EditorInput","text":""},{"location":"LuaTextBox/API%20Reference/LuaTextBox/publicvar_EditorInput/#public-variable-information","title":"Public variable information","text":"<pre><code>LuaTextBox.EditorInput :: TextBox\n</code></pre> <p>The IDE input textbox.</p>"},{"location":"LuaTextBox/API%20Reference/LuaTextBox/publicvar_Instance/","title":"Instance","text":""},{"location":"LuaTextBox/API%20Reference/LuaTextBox/publicvar_Instance/#public-variable-information","title":"Public variable information","text":"<pre><code>LuaTextBox.Instance :: ScrollingFrame\n</code></pre> <p>The root of the IDE's ui.</p>"},{"location":"LuaTextBox/API%20Reference/LuaTextBox/publicvar_Name/","title":"Name","text":""},{"location":"LuaTextBox/API%20Reference/LuaTextBox/publicvar_Name/#public-variable-information","title":"Public variable information","text":"<pre><code>LuaTextBox.Name :: string\n</code></pre> <p>Instance name.</p>"},{"location":"LuaTextBox/API%20Reference/LuaTextBox/publicvar_Parent/","title":"Parent","text":""},{"location":"LuaTextBox/API%20Reference/LuaTextBox/publicvar_Parent/#public-variable-information","title":"Public variable information","text":"<pre><code>LuaTextBox.Parent :: Instance\n</code></pre> <p>Instance parent.</p>"},{"location":"LuaTextBox/API%20Reference/LuaTextBox/publicvar_SelectionStart/","title":"SelectionStart","text":""},{"location":"LuaTextBox/API%20Reference/LuaTextBox/publicvar_SelectionStart/#public-variable-information","title":"Public variable information","text":"<pre><code>LuaTextBox.SelectionStart :: number\n</code></pre> <p>EditorInput's SelectionStart.</p>"},{"location":"LuaTextBox/API%20Reference/LuaTextBox/publicvar_Text/","title":"Text","text":""},{"location":"LuaTextBox/API%20Reference/LuaTextBox/publicvar_Text/#public-variable-information","title":"Public variable information","text":"<pre><code>LuaTextBox.Text :: string\n</code></pre> <p>EditorInput's Text.</p>"},{"location":"LuauInLuau/About/","title":"About","text":"<p>LuauInLuau is a module for running Luau code inside Luau, it's basically C++ Luau source code translated to Roblox thanks to WebAssembly technology and @Rerumu's Wasynth.</p>"},{"location":"LuauInLuau/About/#get-the-module","title":"Get the module","text":"<ul> <li>GitHub Repository</li> </ul>"},{"location":"LuauInLuau/API%20Reference/func_Compile/","title":"Compile()","text":""},{"location":"LuauInLuau/API%20Reference/func_Compile/#function-info","title":"Function info","text":"<pre><code>function LuauInLuau.Compile(src: string, optimizationlevel: number?, debuglevel: number?): (success: boolean, bytecode: string, bytecodelength: number)\n</code></pre> <p>Compiles <code>src</code> into Luau bytecode if there are no syntax/compile errors</p>"},{"location":"LuauInLuau/API%20Reference/func_Compile/#arguments","title":"Arguments","text":"<ul> <li><code>src: string</code> - The source</li> <li><code>optimizationlevel: number?</code> - The optimization level for the resulting bytecode</li> <li><code>debuglevel: number?</code> - The debug level for the resulting bytecode</li> </ul> <p>Important note regarding the optimization and debug level arguments</p> <p>The <code>optimizationlevel</code> and <code>debuglevel</code> argument is only available starting with LuauInLuau v0.579</p>"},{"location":"LuauInLuau/API%20Reference/func_Compile/#returns","title":"Returns","text":"<ul> <li><code>success: boolean</code> - Indicates whether the compiler successfully compiled <code>src</code> into bytecode or not</li> <li><code>bytecode: string</code> - The bytecode</li> <li><code>bytecodelength: number</code> - The bytecode length</li> </ul>"},{"location":"LuauInLuau/API%20Reference/func_CreateClosureFromSource/","title":"CreateClosureFromSource()","text":""},{"location":"LuauInLuau/API%20Reference/func_CreateClosureFromSource/#function-info","title":"Function info","text":"<pre><code>function LuauInLuau.CreateClosureFromSource(src: string, safeenv: boolean?, optimizationlevel: number?, debuglevel: number?): () -&gt; ()\n</code></pre> <p>Compiles Luau source into a closure</p>"},{"location":"LuauInLuau/API%20Reference/func_CreateClosureFromSource/#arguments","title":"Arguments","text":"<ul> <li><code>src: string</code> - The source</li> <li><code>safeenv: boolean?</code> - Indicates whether safeenv features should be enabled or not</li> <li><code>optimizationlevel: number?</code> - The optimization level for the resulting bytecode</li> <li><code>debuglevel: number?</code> - The debug level for the resulting bytecode</li> </ul> <p>Important note regarding the optimization and debug level arguments</p> <p>The <code>optimizationlevel</code> and <code>debuglevel</code> argument is only available starting with LuauInLuau v0.579</p>"},{"location":"LuauInLuau/API%20Reference/func_ResetFlags/","title":"ResetFlags()","text":""},{"location":"LuauInLuau/API%20Reference/func_ResetFlags/#function-info","title":"Function info","text":"<pre><code>function LuauInLuau.ResetFlags()\n</code></pre> <p>Resets all Luau flags, if a flag is experimental, that flag will be set to false, otherwise it will be set to true.</p> <p>Only available starting 0.579</p> <p>This function is available starting from LuauInLuau 0.579</p>"},{"location":"LuauInLuau/API%20Reference/func_ResultCodeToBoolean/","title":"ResultCodeToBoolean()","text":""},{"location":"LuauInLuau/API%20Reference/func_ResultCodeToBoolean/#function-info","title":"Function info","text":"<pre><code>function LuauInLuau.ResultCodeToBoolean(code): (result: boolean)\n</code></pre> <p>Converts result codes into Luau boolean</p>"},{"location":"LuauInLuau/API%20Reference/func_ResultCodeToBoolean/#arguments","title":"Arguments","text":"<ul> <li><code>code</code> - The result code (0 or 1)</li> </ul>"},{"location":"LuauInLuau/API%20Reference/func_ResultCodeToBoolean/#returns","title":"Returns","text":"<ul> <li><code>result: boolean</code> - Result code converted into a Luau boolean</li> </ul>"},{"location":"LuauInLuau/API%20Reference/func_Run/","title":"Run()","text":""},{"location":"LuauInLuau/API%20Reference/func_Run/#function-info","title":"Function info","text":"<pre><code>function LuauInLuau.LuauRun(src: string, safeenv: boolean?, optimizationlevel: number?, debuglevel: number?): boolean\n</code></pre> <p>Compiles and runs Luau code</p>"},{"location":"LuauInLuau/API%20Reference/func_Run/#arguments","title":"Arguments","text":"<ul> <li><code>src: string</code> - The source</li> <li><code>safeenv: boolean?</code> - Indicates whether safeenv features should be enabled or not</li> <li><code>optimizationlevel: number?</code> - The optimization level for the resulting bytecode</li> <li><code>debuglevel: number?</code> - The debug level for the resulting bytecode</li> </ul> <p>Important note regarding the optimization and debug level arguments</p> <p>The <code>optimizationlevel</code> and <code>debuglevel</code> argument is only available starting with LuauInLuau v0.579</p>"},{"location":"LuauInLuau/API%20Reference/func_RunBytecode/","title":"RunBytecode()","text":""},{"location":"LuauInLuau/API%20Reference/func_RunBytecode/#function-info","title":"Function info","text":"<pre><code>function LuauInLuau.RunBytecode(bytecode: string, safeenv: boolean?)\n</code></pre> <p>Runs a Luau bytecode</p>"},{"location":"LuauInLuau/API%20Reference/func_RunBytecode/#arguments","title":"Arguments","text":"<ul> <li><code>bytecode: string</code> - The bytecode</li> <li><code>safeenv: boolean?</code> - Indicates whether safeenv features should be enabled or not</li> </ul>"},{"location":"LuauInLuau/API%20Reference/func_RunWithSafeEnv/","title":"RunWithSafeEnv()","text":""},{"location":"LuauInLuau/API%20Reference/func_RunWithSafeEnv/#function-info","title":"Function info","text":"<pre><code>function LuauInLuau.RunWithSafeEnv(src: string)\n</code></pre> <p>This is just a wrapper to <code>LuauInLuau.Run(src, true)</code>, compiles and runs Luau source with safeenv features.</p>"},{"location":"LuauInLuau/API%20Reference/func_RunWithSafeEnv/#arguments","title":"Arguments","text":"<ul> <li><code>src: string</code> - The source</li> </ul>"},{"location":"LuauInLuau/API%20Reference/func_RunWithoutSafeEnv/","title":"RunWithoutSafeEnv()","text":""},{"location":"LuauInLuau/API%20Reference/func_RunWithoutSafeEnv/#function-info","title":"Function info","text":"<pre><code>function LuauInLuau.RunWithoutSafeEnv(src: string)\n</code></pre> <p>This is just a wrapper to <code>LuauInLuau.Run(src, false)</code>, compiles and runs Luau source without enabling safeenv features.</p>"},{"location":"LuauInLuau/API%20Reference/func_RunWithoutSafeEnv/#arguments","title":"Arguments","text":"<ul> <li><code>src: string</code> - The source</li> </ul>"},{"location":"LuauInLuau/API%20Reference/func_SetLuauFlag/","title":"SetLuauFlag()","text":""},{"location":"LuauInLuau/API%20Reference/func_SetLuauFlag/#function-info","title":"Function info","text":"<pre><code>function LuauInLuau.SetLuauFlag(name: string, value: boolean)\n</code></pre> <p>For setting a Luau flag</p> <p>Only available starting 0.579</p> <p>This function is available starting from LuauInLuau 0.579</p>"},{"location":"LuauInLuau/API%20Reference/func_SetLuauFlag/#arguments","title":"Arguments","text":"<ul> <li><code>name: string</code> - The flag name</li> <li><code>value: boolean</code> - The flag value</li> </ul>"},{"location":"LuauInLuau/API%20Reference/func_SetLuauFlags/","title":"SetLuauFlags()","text":""},{"location":"LuauInLuau/API%20Reference/func_SetLuauFlags/#function-info","title":"Function info","text":"<pre><code>function LuauInLuau.SetLuauFlags(value: boolean)\n</code></pre> <p>For setting all Luau flags to <code>value</code></p> <p>Only available starting 0.579</p> <p>This function is available starting from LuauInLuau 0.579</p>"},{"location":"LuauInLuau/API%20Reference/func_SetLuauFlags/#arguments","title":"Arguments","text":"<ul> <li><code>value: boolean</code> - The value to set to all flags</li> </ul>"},{"location":"LuauInLuau/API%20Reference/func_ValidLuauBytecode/","title":"ValidLuauBytecode()","text":""},{"location":"LuauInLuau/API%20Reference/func_ValidLuauBytecode/#function-info","title":"Function info","text":"<pre><code>function LuauInLuau.ValidLuauBytecode(bytecode: string)\n</code></pre> <p>This is for verifying whether or not <code>bytecode</code> is a valid Luau bytecode</p>"},{"location":"LuauInLuau/API%20Reference/func_ValidLuauBytecode/#arguments","title":"Arguments","text":"<ul> <li><code>bytecode: string</code> - The bytecode</li> </ul>"},{"location":"LuauInLuau/API%20Reference/publicvar_FUNC_LIST/","title":"FUNC_LIST","text":""},{"location":"LuauInLuau/API%20Reference/publicvar_FUNC_LIST/#public-variable-information","title":"Public variable information","text":"<pre><code>LuauInLuau.FUNC_LIST :: {[number]: (...any) -&gt; (...any)}\n</code></pre> <p>This is the native function list, from the WebAssembly build</p>"},{"location":"LuauInLuau/API%20Reference/publicvar_NamedFunctionList/","title":"NamedFunctionList","text":""},{"location":"LuauInLuau/API%20Reference/publicvar_NamedFunctionList/#public-variable-information","title":"Public variable information","text":"<pre><code>LuauInLuau.NamedFunctionList :: {[string]: (...any) -&gt; (...any)}\n</code></pre> <p>A dictionary containing of functions that LuauInLuau internally needs, such as <code>dlmalloc</code>, <code>luau_compile</code>, and also LuauInLuau functions such as <code>LuauRunUsingCustomState</code> and more.</p>"},{"location":"LuauInLuau/API%20Reference/publicvar_rt/","title":"rt","text":""},{"location":"LuauInLuau/API%20Reference/publicvar_rt/#public-variable-information","title":"Public variable information","text":"<pre><code>LuauInLuau.rt :: {[any]: any}\n</code></pre> <p>Wasynth's <code>rt</code> table, for interacting with memory and the environment</p>"},{"location":"RESignal/About/","title":"About","text":"<p>RESignal is my own vanilla luau signal implementation, it has 3 different callback execution method (see the <code>SignalBehavior</code> enum for more info)</p>"},{"location":"RESignal/About/#get-the-module","title":"Get the module","text":"<ul> <li>GitHub gist (includes benchmark script)</li> </ul>"},{"location":"RESignal/About/#fire-benchmark-times","title":":Fire() benchmark times","text":"<p>TODO: As of v2.0.0, RESignal requires to be benchmarked again.</p>"},{"location":"RESignal/API%20Reference/enum_SignalBehavior/","title":"RESignal.SignalBehavior","text":""},{"location":"RESignal/API%20Reference/enum_SignalBehavior/#enum-information","title":"Enum information","text":"<pre><code>RESignal.SignalBehavior = {\n    NewThread;\n    Deferred;\n    Synced;\n}\n</code></pre> Mode name Description NewThread Calls the callback on a new thread using <code>task.spawn()</code> Deferred Calls the callback on a deferred thread (runs after thread calling <code>RESignal:Fire()</code> has finished/yielded) using <code>task.defer()</code>. Synced NOT YIELD-SAFE. Execution of a connection callback is handled by the thread calling the fire function."},{"location":"RESignal/API%20Reference/func_new/","title":"new()","text":""},{"location":"RESignal/API%20Reference/func_new/#function-info","title":"Function info","text":"<pre><code>function RESignal.new(signalbehavior: RESignal.SignalBehavior?)\n</code></pre> <p>Creates a new <code>RESignal</code> object, with a optional signal behavior argument.</p> <p>You can reset the signal behavior using <code>RESignal:SetSignalBehavior()</code></p>"},{"location":"RESignal/API%20Reference/func_new/#arguments","title":"Arguments","text":"<ul> <li>signalbehavior: RESignal.SignalBehavior? (default is RESignal.SignalBehavior.NewThread)</li> </ul>"},{"location":"RESignal/API%20Reference/RESignal/func_Connect/","title":"Connect()","text":""},{"location":"RESignal/API%20Reference/RESignal/func_Connect/#function-info","title":"Function info","text":"<pre><code>function RESignal:Connect(callback: (...any) -&gt; (...any))\n</code></pre> <p>Creates a new <code>RESignalConnection</code>, the callback will be called with the same arguments passed by <code>RESignal:Fire()</code>.</p>"},{"location":"RESignal/API%20Reference/RESignal/func_Connect/#arguments","title":"Arguments","text":"<ul> <li>callback: (...any) -&gt; (...any) - The callback that will be called with the arguments passed to <code>RESignal:Fire()</code></li> </ul>"},{"location":"RESignal/API%20Reference/RESignal/func_ConnectOnce/","title":"ConnectOnce()","text":""},{"location":"RESignal/API%20Reference/RESignal/func_ConnectOnce/#function-info","title":"Function info","text":"<pre><code>function RESignal:ConnectOnce(callback: (...any) -&gt; (...any))\n</code></pre> <p>Creates a new <code>RESignalConnection</code> but disconnects it after it's first fire, the callback will be called with the same arguments passed by <code>RESignal:Fire()</code>.</p>"},{"location":"RESignal/API%20Reference/RESignal/func_ConnectOnce/#arguments","title":"Arguments","text":"<ul> <li>callback: (...any) -&gt; (...any) - The callback that will be called with the arguments passed to <code>RESignal:Fire()</code></li> </ul>"},{"location":"RESignal/API%20Reference/RESignal/func_Destroy/","title":"Destroy()","text":""},{"location":"RESignal/API%20Reference/RESignal/func_Destroy/#function-info","title":"Function info","text":"<pre><code>function RESignal:Destroy()\n</code></pre> <p>Destroys the current <code>RESignal</code> object, will make it unusable.</p> <p>Destroyed object will become completely unusable</p> <p>Calling any functions except Destroy() after this object was destroyed will result in a error!</p>"},{"location":"RESignal/API%20Reference/RESignal/func_DisconnectAll/","title":"DisconnectAll()","text":""},{"location":"RESignal/API%20Reference/RESignal/func_DisconnectAll/#function-info","title":"Function info","text":"<pre><code>function RESignal:DisconnectAll()\n</code></pre> <p>Disconnects all <code>RESignalConnection</code> connected to this <code>RESignal</code> object.</p>"},{"location":"RESignal/API%20Reference/RESignal/func_Fire/","title":"Fire()","text":""},{"location":"RESignal/API%20Reference/RESignal/func_Fire/#function-info","title":"Function info","text":"<pre><code>function RESignal:Fire(... : any)\n</code></pre> <p>Fires a <code>RESignal</code> object, calling all connected connection's callback based on the signal behavior.</p>"},{"location":"RESignal/API%20Reference/RESignal/func_Fire/#arguments","title":"Arguments","text":"<p>Anything passed to this function will be passed to each connected connection's callback as it's call arguments.</p>"},{"location":"RESignal/API%20Reference/RESignal/func_SetSignalBehavior/","title":"SetSignalBehavior()","text":""},{"location":"RESignal/API%20Reference/RESignal/func_SetSignalBehavior/#function-info","title":"Function info","text":"<pre><code>function RESignal:SetSignalBehavior(newsignalbehavior: RESignal.SignalBehavior)\n</code></pre> <p>Sets the signal behavior, see <code>RESignal.SignalBehavior</code></p>"},{"location":"RESignal/API%20Reference/RESignal/func_SetSignalBehavior/#arguments","title":"Arguments","text":"<ul> <li>newsignalbehavior: RESignal.SignalBehavior -  The new signal behavior to be set, see <code>RESignal.SignalBehavior</code>.</li> </ul>"},{"location":"RESignal/API%20Reference/RESignal/func_Wait/","title":"Wait()","text":""},{"location":"RESignal/API%20Reference/RESignal/func_Wait/#function-info","title":"Function info","text":"<pre><code>function RESignal:Wait()\n</code></pre> <p>Yields the current coroutine/thread until this <code>RESignal</code> object was fired.</p>"},{"location":"RESignal/API%20Reference/RESignal/func_Wait/#returns","title":"Returns","text":"<p>Returns anything passed to <code>RESignal:Fire()</code></p>"},{"location":"RESignal/API%20Reference/RESignalConnection/func_Disconnect/","title":"Disconnect()","text":""},{"location":"RESignal/API%20Reference/RESignalConnection/func_Disconnect/#function-info","title":"Function info","text":"<pre><code>function RESignalConnection:Disconnect()\n</code></pre> <p>Disconnects a RESignalConnection from a RESignal object so that when <code>RESignal:Fire(...)</code> is called, this disconnected callback won't run.</p>"},{"location":"RESignal/API%20Reference/RESignalConnection/publicvar_Connected/","title":"Connected","text":""},{"location":"RESignal/API%20Reference/RESignalConnection/publicvar_Connected/#publicexported-variable-information","title":"Public/exported variable information","text":"<pre><code>RESignalConnection.Connected :: boolean\n</code></pre> <p>Indicates if this <code>RESignalConnection</code> is connected to a <code>RESignal</code> or not.</p>"},{"location":"RigConverter/About/","title":"About","text":"<p>RigConverter is a module for converting Humanoid rigs between R6 and R15, currently only supports players.</p>"},{"location":"RigConverter/About/#get-the-module","title":"Get the module","text":"<ul> <li>GitHub Repository</li> <li>Releases</li> </ul>"},{"location":"RigConverter/API%20Reference/func_R15/","title":"R15()","text":"<pre><code>function RigConverter.R15(plr: number | string | Player): boolean\n</code></pre> <p>Note about the <code>plr</code> argument accepting 3 types of argument</p> <p>You can pass the following things to the <code>plr</code> argument as long as the player is inside the server and:</p> <ul> <li><code>plr</code> is the Player's UserId</li> <li><code>plr</code> is the Player instance</li> <li><code>plr</code> is the Player's name (NOT DisplayName)</li> </ul> <p>Converts the target player's character appearence to use the R15 rig.</p> <p>Returns <code>true</code> when conversion succeeded.</p>"},{"location":"RigConverter/API%20Reference/func_R6/","title":"R6()","text":"<pre><code>function RigConverter.R6(plr: number | string | Player): boolean\n</code></pre> <p>Note about the <code>plr</code> argument accepting 3 types of argument</p> <p>You can pass the following things to the <code>plr</code> argument as long as the player is inside the server and:</p> <ul> <li><code>plr</code> is the Player's UserId</li> <li><code>plr</code> is the Player instance</li> <li><code>plr</code> is the Player's name (NOT DisplayName)</li> </ul> <p>Converts the target player's character appearence to use the R6 rig.</p> <p>Returns <code>true</code> when conversion succeeded.</p>"},{"location":"StarGenerator/About/","title":"About","text":"<p>StarGenerator is a (unefficient technically) module for generating stars with random colors on a set of Vector3/number, was made for new years 2022 for my friends but I decided to release it online incase anyone wants to use it.</p>"},{"location":"StarGenerator/About/#get-the-module","title":"Get the module","text":"<ul> <li>GitHub Repository</li> </ul>"},{"location":"StarGenerator/API%20Reference/func_Generate/","title":"Generate()","text":"<pre><code>function StarGenerator.Generate(count: number, posdef: posv3 | posnumber, acolors: {Color3}, folder: Instance, size: Vector3?)\n</code></pre> <p>Generates stars based on the provided argumemts.</p> <p>See also:</p> <ul> <li>posnum</li> <li>posv3</li> </ul>"},{"location":"StarGenerator/API%20Reference/type_posnum/","title":"posnum","text":"<pre><code>type posnumber = {pos1: number, pos2: number?, minheight: number?, maxheight: number?}\n</code></pre> <ul> <li>pos1: number = Main number position for randomisation</li> <li>pos2: number? = Optional, second number position for randomisation, if not defined then the positions will be randomised between -pos1 and pos1, else it will be randomised between pos1 and pos2</li> <li>minheight: number? = Optional, minimum height of star generation for randomisation</li> <li>maxheight: number? = Optional, maximum height of star generation for randomisation</li> </ul>"},{"location":"StarGenerator/API%20Reference/type_posv3/","title":"posv3","text":"<pre><code>type posv3 = {pos1=Vector3, pos2=Vector3?}\n</code></pre> <ul> <li>pos1: Vector3 = Main vector of the position for randomisation</li> <li>pos2: Vector3 = Optional, second vector, if not defined then the positions will be randomised between -pos1 and pos1 else it will be randomised between pos1 and pos2</li> </ul>"}]}